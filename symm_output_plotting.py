# Angular Momentum Plots
times = Xs.t
fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$\omega_1$ vs Time (Symmetrical)', fontsize = 20)
plt.plot(times, w1star_lists, color = 'k', linewidth = '3', label = 'reference')
plt.plot(times, w1s, linewidth = '3', linestyle = '--', color = 'red', label='tracking')
plt.axvline(x = 12, color = 'orange')
plt.axvline(x = 20, color = 'orange')
plt.ylabel(r'$\omega$ (rad/s)', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 16)
plt.grid()
plt.plot()
plt.savefig('w1_proj_sym.png')

fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$\omega_2$ vs Time (Symmetrical)', fontsize = 20)
plt.plot(times, w2star_lists, color = 'k', linewidth = '3', label = 'reference')
plt.plot(times, w2s, linewidth = '3', linestyle = '--', color = 'red', label='tracking')
plt.axvline(x = 52, color = 'orange')
plt.axvline(x = 60, color = 'orange')
plt.ylabel(r'$\omega$ (rad/s)', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 16)
plt.grid()
plt.plot()
plt.savefig('w2_proj_sym.png')

fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$\omega_3$ vs Time (Symmetrical)', fontsize = 20)
plt.plot(times, w3star_lists, color = 'k', linewidth = '3', label = 'reference')
plt.plot(times, w3s, linewidth = '3', linestyle = '--', color = 'red', label='tracking')
plt.axvline(x = 52, color = 'orange')
plt.axvline(x = 60, color = 'orange')
plt.ylabel(r'$\omega$ (rad/s)', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 16)
plt.grid()
plt.plot()
plt.savefig('w3_proj_sym.png')

# Attitude Parameter Plots
fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$\mu_1$ vs Time (Symmetrical)', fontsize = 20)
plt.plot(times, mu1s_lists, color = 'k', linewidth = '3', label = 'reference')
plt.plot(times, mu1s, linewidth = '3', linestyle = '--', color = 'red', label='tracking')
plt.axvline(x = 12, color = 'orange')
plt.axvline(x = 20, color = 'orange')
plt.ylabel(r'$\mu$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 16)
plt.grid()
plt.plot()
plt.savefig('mu1_proj_sym.png')

fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$\mu_2$ vs Time (Symmetrical)', fontsize = 20)
plt.plot(times, mu2s_lists, color = 'k', linewidth = '3', label = 'reference')
plt.plot(times, mu2s, linewidth = '3', linestyle = '--', color = 'red', label='tracking')
plt.axvline(x = 52, color = 'orange')
plt.axvline(x = 60, color = 'orange')
plt.ylabel(r'$\mu$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 16)
plt.grid()
plt.plot()
plt.savefig('mu2_proj_sym.png')

fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$\mu_3$ vs Time (Symmetrical)', fontsize = 20)
plt.plot(times, mu3s_lists, color = 'k', linewidth = '3', label = 'reference')
plt.plot(times, mu3s, linewidth = '3', linestyle = '--', color = 'red', label='tracking')
plt.axvline(x = 52, color = 'orange')
plt.axvline(x = 60, color = 'orange')
plt.ylabel(r'$\mu$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 16)
plt.grid()
plt.plot()
plt.savefig('mu3_proj_sym.png')

# Control Plot
fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$u$ vs Time (Symmetrical)', fontsize = 20)
plt.plot(times, u1_lists, color = 'r', linewidth = '3', label = r'$u_1$')
plt.ylabel(r'$u$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.grid()
plt.plot()

plt.plot(times, u2_lists, color = 'k', linewidth = '3', label = r'$u_2$')
plt.ylabel(r'$u$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.grid()
plt.plot()

plt.plot(times, u3_lists, color = 'g', linewidth = '3', label = r'$u_3$')
plt.axvline(x = 32, color = 'orange')
plt.axvline(x = 40, color = 'orange')
plt.ylabel(r'$u$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 15)
plt.grid()
plt.plot()
plt.savefig('Cont_proj_sym.png')

# Lyapunov Function Plot
fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$V$ vs Time (Symmetrical)', fontsize = 20)
plt.plot(times, v_lists, color = 'k', linewidth = '3')
plt.axvline(x = 7, color = 'orange')
plt.axvline(x = 15, color = 'orange')
plt.ylabel(r'$V$', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.grid()
plt.plot()
plt.savefig('Lyap_proj_sym.png')

# Pyramid Wheel Configuration (h vs t)
fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$h$ vs Time for Pyramid Configuration (Symmetrical)', fontsize = 20)
plt.plot(times, h1_pyrs, color = 'r', linewidth = '3', label = r'$h_1$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)

plt.plot(times, h2_pyrs, color = 'k', linewidth = '3', label = r'$h_2$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)

plt.plot(times, h3_pyrs, color = 'g', linewidth = '3', label = r'$h_3$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 15)

plt.plot(times, h4_pyrs, color = 'b', linewidth = '3', label = r'$h_3$')
plt.ylabel(r'$h$ (Nms)', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 15)
plt.grid()
plt.plot()
plt.savefig('h_pyr_proj_sym.png')

# NASA Wheel Configuration (h vs t)
fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$h$ vs Time for NASA Configuration (Symmetrical)', fontsize = 20)
plt.plot(times, h1_nasas, color = 'r', linewidth = '3', label = r'$h_1$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)

plt.plot(times, h2_nasas, color = 'k', linewidth = '3', label = r'$h_2$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)

plt.plot(times, h3_nasas, color = 'g', linewidth = '3', label = r'$h_3$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 15)

plt.plot(times, h4_nasas, color = 'b', linewidth = '3', label = r'$h_4$')
plt.ylabel(r'$h$ (Nms)', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 15)
plt.grid()
plt.plot()
plt.savefig('h_NASA_proj_sym.png')

# 6-Wheel Configuration (h vs t)
fig = plt.figure(figsize =(12,6), tight_layout = True)
plt.title(r'$h$ vs Time for 6 Wheel Configuration (Symmetrical)', fontsize = 20)
plt.plot(times, h1_6ws, color = 'r', linewidth = '3', label = r'$h_1$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)

plt.plot(times, h2_6ws, color = 'k', linewidth = '3', label = r'$h_2$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)

plt.plot(times, h3_6ws, color = 'g', linewidth = '3', label = r'$h_3$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 15)

plt.plot(times, h4_6ws, color = 'b', linewidth = '3', label = r'$h_4$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 15)

plt.plot(times, h5_6ws, color = 'c', linewidth = '3', label = r'$h_5$')
plt.ylabel(r'$h$ ', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 15)

plt.plot(times, h6_6ws, color = 'y', linewidth = '3', label = r'$h_6$')
plt.ylabel(r'$h$ (Nms)', fontsize = 18)
plt.xlabel('Time (s)', fontsize = 18)
plt.xticks(fontsize = 16)
plt.yticks(fontsize = 16)
plt.legend(fontsize = 15)
plt.grid()
plt.plot()
plt.savefig('h_6w_proj_sym.png')

# Norm of H Symm for t0 (initial time) and tf (final time) for all configs
# Initial s/c ang mom
H_0s = np.linalg.norm(Js@w0)
print('H(t_0) (Nms) = ', H_0s)

# Final s/c ang mom
wfs = np.array([w1s[-1], w2s[-1], w3s[-1]])
H_fs = np.linalg.norm(Js@wfs)
print('H(t_f) (Nms) = ', H_fs)

# Final ang mom of 6 wheel
hf_6s = np.array([h1_6ws[-1], h2_6ws[-1], h3_6ws[-1], h4_6ws[-1], h5_6ws[-1], h6_6ws[-1]])
h_f_6s = np.linalg.norm(hf_6s)
print('h_6(t_f) (Nms) = ', h_f_6s)

# Final ang mom of NASA config
hf_nasas = np.array([h1_nasas[-1], h2_nasas[-1], h3_nasas[-1], h4_nasas[-1],])
h_f_nasas = np.linalg.norm(hf_nasas)
print('h_nasa(t_f) (Nms) = ', h_f_nasas)

# Final ang mom of Pyramid config
hf_pyrs = np.array([h1_pyrs[-1], h2_pyrs[-1], h3_pyrs[-1], h4_pyrs[-1],])
h_f_pyrs = np.linalg.norm(hf_pyrs)
print('h_pyr(t_f) (Nms) = ', h_f_pyrs)
